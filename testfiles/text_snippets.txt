Despite some similarities, Generators and coroutines are basically two different concepts. Generators produce values. Coroutines tend to consume values. It is easy to get sidetracked because methods meant for coroutines are sometimes described as a way to tweak generators that are in the process of producing an iteration pattern (i.e., resetting its value). This is mostly bogus.

[chrome-extension://oemmndcbldboiebfnladdacbdfmadadm/http://dabeaz.com/coroutines/Coroutines.pdf, sl. 16]


There are many ways to reverse changes in Git. And just like committing, reversing changes in Git has both a low-level component (staging individual files or chunks) and a high-level component (how the changes are actually reversed). Our application will focus on the latter.

[https://learngitbranching.js.org, rampup4]

Git Revert
While resetting works great for local branches on your own machine, its method of "rewriting history" doesn't work for remote branches that others are using.
In order to reverse changes and share those reversed changes with others, we need to use git revert. Let's see it in action

[https://learngitbranching.js.org, rampup4]

To complete this level, reverse the most recent commit on both local and pushed. You will revert two commits total (one per branch).

Keep in mind that pushed is a remote branch and local is a local branch -- that should help you choose your methods.
